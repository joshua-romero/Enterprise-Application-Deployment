BEGIN {
    $date = (Get-Date -Format yyyy-MM-dd)
    $Software = 'Acrobat'
    $logPath = "C:\Patches\Logs\$Software-$date.log"
    
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    
    function TimeStamp($Message) {
        return "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $Message"
    }
    
    $dirs = @(
        "C:\Patches\Logs",
        "C:\Patches\Acrobat"
    )

    foreach ($dir in $dirs) {
        if (!(Test-Path $dir)) {
            New-Item -Path $dir -ItemType Directory -Force | Out-Null
        }
    }
    
    Write-Host (TimeStamp "Checking if Acrobat is already installed...") -ForegroundColor Cyan
    $acrobatExists = $false
    
    $acroPaths = @(
        "${env:ProgramFiles}\Adobe\Acrobat DC\Acrobat\Acrobat.exe",
        "${env:ProgramFiles(x86)}\Adobe\Acrobat DC\Acrobat\Acrobat.exe"
    )
    
    foreach ($path in $acroPaths) {
        if (Test-Path -Path $path) {
            $acrobatExists = $true
            $ver = (Get-Item $path).VersionInfo.FileVersion
            Write-Host (TimeStamp "Found Acrobat (v$ver) - will just check for updates") -ForegroundColor Green
            break
        }
    }
    
    if (-not $acrobatExists) {
        $regPaths = @(
            "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*",
            "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
        )
        
        foreach ($reg in $regPaths) {
            $app = Get-ItemProperty $reg | Where-Object { 
                $_.DisplayName -like "*Adobe Acrobat*" -and 
                $_.DisplayName -notlike "*Reader*" 
            }
            if ($app) {
                $acrobatExists = $true
                Write-Host (TimeStamp "Found Acrobat in registry (v$($app.DisplayVersion)) - will just update") -ForegroundColor Green
                break
            }
        }
    }
    
    if ($acrobatExists) {
        Write-Host (TimeStamp "Skipping install, jumping to updates...") -ForegroundColor Cyan
    }
    else {
        Write-Host (TimeStamp "Checking for Visual C++ 2013...") -ForegroundColor Cyan
        $vcRedistExists = $false
        
        $regPaths = @(
            "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*",
            "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
        )
        
        foreach ($reg in $regPaths) {
            $vcapp = Get-ItemProperty $reg | Where-Object { 
                ($_.DisplayName -like "*Visual C++ 2013*" -and $_.DisplayName -like "*x64*") -or
                ($_.DisplayName -like "*Visual C++ Redistributable*2013*" -and $_.DisplayName -like "*x64*")
            }
            if ($vcapp) {
                $vcRedistExists = $true
                Write-Host (TimeStamp "Found VC++ 2013 (v$($vcapp.DisplayVersion)) - skipping install") -ForegroundColor Green
                break
            }
        }
        
        if (-not $vcRedistExists) {
            $vcRedistUrl = "https://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe"
            $vcRedistPath = "C:\Patches\Acrobat\vcredist_x64_2013.exe"
            
            Write-Host (TimeStamp "Downloading VC++ 2013...") -ForegroundColor Cyan
            
            try {
                Import-Module BitsTransfer -ErrorAction Stop
                Start-BitsTransfer -Source $vcRedistUrl -Destination $vcRedistPath -Priority High
                Write-Host (TimeStamp "VC++ download finished") -ForegroundColor Green
            }
            catch {
                Write-Host (TimeStamp "BITS failed, trying WebClient...") -ForegroundColor Yellow
                
                try {
                    $wc = New-Object System.Net.WebClient
                    $wc.DownloadFile($vcRedistUrl, $vcRedistPath)
                    Write-Host (TimeStamp "VC++ download finished (WebClient)") -ForegroundColor Green
                } 
                catch {
                    Write-Host (TimeStamp "WebClient failed too, trying HttpClient...") -ForegroundColor Yellow
                    
                    try {
                        $h = New-Object System.Net.Http.HttpClientHandler
                        $h.ServerCertificateCustomValidationCallback = {$true}
                        $c = New-Object System.Net.Http.HttpClient($h)
                        $r = $c.GetAsync($vcRedistUrl).Result
                        $fs = [System.IO.File]::Create($vcRedistPath)
                        $r.Content.CopyToAsync($fs).Wait()
                        $fs.Close()
                        Write-Host (TimeStamp "VC++ download finished (HttpClient)") -ForegroundColor Green
                    } 
                    catch {
                        Write-Host (TimeStamp "All download methods failed for VC++: $_") -ForegroundColor Red
                        exit 1
                    }
                }
            }
            
            Write-Host (TimeStamp "Installing VC++ 2013...") -ForegroundColor Cyan
            try {
                Start-Process -FilePath $vcRedistPath -ArgumentList "/install /quiet /norestart" -Wait
                Write-Host (TimeStamp "VC++ 2013 installed OK") -ForegroundColor Green
                
                Remove-Item -Path $vcRedistPath -Force -ErrorAction SilentlyContinue
            } catch {
                Write-Host (TimeStamp "VC++ install failed: $_") -ForegroundColor Red
                exit 1
            }
        }
    }
}

PROCESS {
    if ($acrobatExists) {
        Write-Host (TimeStamp "Skipping Acrobat install phase since it's already installed") -ForegroundColor Cyan
        return
    }
    
    $url = "https://trials.adobe.com/AdobeProducts/APRO/Acrobat_HelpX/win32/Acrobat_DC_Web_WWMUI.zip"
    $zipFile = "C:\Patches\Acrobat\Acrobat_DC_Web_WWMUI.zip"
    
    Write-Host (TimeStamp "Downloading Acrobat DC (big file - this will take a while)...") -ForegroundColor Cyan
    $start = Get-Date
    
    try {
        Import-Module BitsTransfer -ErrorAction Stop
        Start-BitsTransfer -Source $url -Destination $zipFile -Priority High
        
        $end = Get-Date
        $duration = ($end - $start).TotalSeconds
        $fileSize = (Get-Item $zipFile).Length / 1MB
        $speed = [Math]::Round($fileSize/$duration, 2)
        Write-Host (TimeStamp "Acrobat download finished: $([Math]::Round($fileSize, 2)) MB in $([Math]::Round($duration, 2)) sec ($speed MB/s)") -ForegroundColor Green
    } 
    catch {
        Write-Host (TimeStamp "BITS failed, falling back to WebRequest (slower)...") -ForegroundColor Yellow
        
        try {
            Invoke-WebRequest -Uri $url -OutFile $zipFile -UseBasicParsing
            
            $end = Get-Date
            $duration = ($end - $start).TotalSeconds
            $fileSize = (Get-Item $zipFile).Length / 1MB
            Write-Host (TimeStamp "Acrobat download finished: $([Math]::Round($fileSize, 2)) MB in $([Math]::Round($duration, 2)) sec") -ForegroundColor Green
        } 
        catch {
            Write-Host (TimeStamp "Download failed: $_") -ForegroundColor Red
            exit 1
        }
    }
    
    Write-Host (TimeStamp "Extracting Acrobat installer...") -ForegroundColor Cyan
    $extractStart = Get-Date
    
    try {
        try {
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory($zipFile, "C:\Patches\Acrobat")
        }
        catch {
            Expand-Archive -Path $zipFile -DestinationPath "C:\Patches\Acrobat" -Force
        }
        
        $extractEnd = Get-Date
        $extractTime = ($extractEnd - $extractStart).TotalSeconds
        Write-Host (TimeStamp "Extraction done in $([Math]::Round($extractTime, 2)) seconds") -ForegroundColor Green
        
        Remove-Item -Path $zipFile -Force -ErrorAction SilentlyContinue
    } 
    catch {
        Write-Host (TimeStamp "Extraction failed: $_") -ForegroundColor Red
        exit 1
    }
    
    $msiPath = "C:\Patches\Acrobat\Adobe Acrobat\AcroPro.msi"
    if (Test-Path -Path $msiPath) {
        Write-Host (TimeStamp "Installing Acrobat DC (this takes a while)...") -ForegroundColor Cyan
        $msiStart = Get-Date
        
        try {
            Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$msiPath`" /qn" -Wait
            
            $msiEnd = Get-Date
            $msiTime = ($msiEnd - $msiStart).TotalSeconds
            Write-Host (TimeStamp "Installation completed in $([Math]::Round($msiTime, 2)) seconds") -ForegroundColor Green
        } 
        catch {
            Write-Host (TimeStamp "MSI install failed: $_") -ForegroundColor Red
            exit 1
        }
    } 
    else {
        Write-Host (TimeStamp "Can't find AcroPro.msi at $msiPath") -ForegroundColor Red
        exit 1
    }
    
    Write-Host (TimeStamp "Base Acrobat installation finished") -ForegroundColor Green
}

END {
    # Credit where credit is due
    <# 
        Thanks to asheroto on GitHub for the URL parsing approach
        Modified and improved for better reliability
    #>

    Write-Host (TimeStamp "Looking for latest Acrobat updates...") -ForegroundColor Cyan
    
    $relNotesURL = "https://helpx.adobe.com/acrobat/release-note/release-notes-acrobat-reader.html"
    try {
        $wc = New-Object System.Net.WebClient
        $html = $wc.DownloadString($relNotesURL)
        
        if ([string]::IsNullOrEmpty($html)) {
            throw "Got empty page from Adobe"
        }
    }
    catch {
        try {
            Write-Host (TimeStamp "WebClient failed, trying curl...") -ForegroundColor Yellow
            $html = curl.exe -s $relNotesURL
            if ([string]::IsNullOrEmpty($html)) {
                throw "Got empty page from curl"
            }
        }
        catch {
            Write-Error (TimeStamp "Couldn't get release notes page: $_")
            return
        }
    }
    
    try {
        $pattern = [regex]::new('<a href="(https://www\.adobe\.com/devnet-docs/acrobatetk/tools/ReleaseNotesDC/[^"]+)"[^>]*>(DC [^<]+)</a>', [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
        $match = $pattern.Match($html)
        if (-not $match.Success) {
            throw "Couldn't find version link - Adobe changed their page?"
        }
        $verUrl = $match.Groups[1].Value
        $verNum = $match.Groups[2].Value
        
        Write-Host (TimeStamp "Found latest Acrobat version: $verNum") -ForegroundColor Cyan
    }
    catch {
        Write-Error (TimeStamp "Failed to find version info: $_")
        return
    }
    
    try {
        try {
            $verPage = $wc.DownloadString($verUrl)
        }
        catch {
            $verPage = curl.exe -s $verUrl
            if ([string]::IsNullOrEmpty($verPage)) {
                throw "Got empty version page"
            }
        }
    } 
    catch {
        Write-Error (TimeStamp "Couldn't get version details: $_")
        return
    }
    
    try {
        $mspPattern = [regex]::new('<a[^>]+href="([^"]+\.msp)"[^>]*>([^<]+)</a>', [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
        $mspMatch = $mspPattern.Match($verPage)
        if (-not $mspMatch.Success) {
            throw "Couldn't find MSP link - maybe format changed?"
        }
        $mspUrl = $mspMatch.Groups[1].Value
        $mspName = [System.IO.Path]::GetFileNameWithoutExtension($mspUrl)
        $mspVer = $mspName -replace '.*?(\d{4,}).*', '$1'
        
        Write-Host (TimeStamp "Found update package: $mspVer") -ForegroundColor Cyan
    } 
    catch {
        Write-Error (TimeStamp "Failed to get update details: $_")
        return
    }
    
    try {
        $updateUrl = "https://ardownload2.adobe.com/pub/adobe/acrobat/win/AcrobatDC/$mspVer/AcrobatDCUpd${mspVer}.msp"
    } 
    catch {
        Write-Error (TimeStamp "Couldn't build update URL: $_")
        return
    }
    
    $updateDir = "C:\Patches\$Software"
    $mspPath = "$updateDir\$Software-$mspVer.msp"
    
    Write-Host (TimeStamp "Downloading Acrobat update $mspVer...") -ForegroundColor Yellow
    $dlStart = Get-Date
    
    try {
        Import-Module BitsTransfer -ErrorAction Stop
        Start-BitsTransfer -Source $updateUrl -Destination $mspPath -Priority High
        
        $dlEnd = Get-Date
        $dlTime = ($dlEnd - $dlStart).TotalSeconds
        $fileSize = (Get-Item $mspPath).Length / 1MB
        Write-Host (TimeStamp "Update downloaded: $([Math]::Round($fileSize, 2)) MB in $([Math]::Round($dlTime, 2)) seconds") -ForegroundColor Green
    }
    catch {
        Write-Host (TimeStamp "BITS failed, trying WebRequest...") -ForegroundColor Yellow
        
        try {
            Invoke-WebRequest -Uri $updateUrl -OutFile $mspPath -UseBasicParsing
            
            $dlEnd = Get-Date
            $dlTime = ($dlEnd - $dlStart).TotalSeconds
            Write-Host (TimeStamp "Update downloaded in $([Math]::Round($dlTime, 2)) seconds") -ForegroundColor Green
        }
        catch {
            Write-Error (TimeStamp "Failed to download update: $_")
            return
        }
    }
    
    try {
        Write-Host (TimeStamp "Installing Acrobat update $mspVer...") -ForegroundColor Yellow
        $patchStart = Get-Date
        
        $p = Start-Process -FilePath "msiexec.exe" -ArgumentList "/update `"$mspPath`" /norestart /qn /l*v $logPath" -Wait -PassThru
        $exitCode = $p.ExitCode
        
        $patchEnd = Get-Date
        $patchTime = ($patchEnd - $patchStart).TotalSeconds
        
        switch ($exitCode) {
            0 {
                Write-Host (TimeStamp "Update successful! Took $([Math]::Round($patchTime, 2)) seconds") -ForegroundColor Green
            }
            3010 {
                Write-Host (TimeStamp "Update successful! (Exit code 3010 - reboot required) Took $([Math]::Round($patchTime, 2)) seconds") -ForegroundColor Green
                Write-Host (TimeStamp "NOTE: For full functionality, reboot the system when convenient") -ForegroundColor Yellow
            }
            1641 {
                Write-Host (TimeStamp "Update successful! (Exit code 1641 - installer initiated reboot) Took $([Math]::Round($patchTime, 2)) seconds") -ForegroundColor Green
            }
            default {
                Write-Error (TimeStamp "Update failed with code: $exitCode - check log at $logPath")
            }
        }
    }
    catch {
        Write-Error (TimeStamp "Error during update: $_")
    }
    finally {
        Write-Host (TimeStamp "Cleaning up...") -ForegroundColor Cyan
        if (Test-Path $updateDir) {
            Remove-Item $updateDir -Recurse -Force -ErrorAction SilentlyContinue
        }
        Write-Host (TimeStamp "All done!") -ForegroundColor Green
    }
}
